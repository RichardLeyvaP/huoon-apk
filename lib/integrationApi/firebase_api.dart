import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:huoon/data/models/configuration/configuration_model.dart';
import 'package:huoon/domain/blocs/configuration_bloc/configuration_service.dart';
import 'package:shared_preferences/shared_preferences.dart';




/// âœ… FunciÃ³n global para manejar mensajes en segundo plano
Future<void> handleBackgroudMessage(RemoteMessage message) async {
  print("ðŸ”¹ Handling a background message: ${message.messageId}");
  print("ðŸ”¹ Data: ${message.data}");
  print("ðŸ”¹ Title: ${message.notification?.title}");
  print("ðŸ”¹ Body: ${message.notification?.body}");
} 
class FirebaseApi {
  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;

  /// âœ… Obtener el token guardado localmente
  Future<String?> _getSavedToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('firebase_token');
  }

  /// âœ… Guardar el nuevo token localmente
  Future<void> _saveToken(String token) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('firebase_token', token);
  }

  /// âœ… Inicializar notificaciones (sin actualizar token aquÃ­)
  Future<void> initNotifications() async {
    await _firebaseMessaging.requestPermission(
      alert: true,
      badge: true,
      provisional: false,
      sound: true,
    );

    /// âœ… Manejo de mensajes en segundo plano
    FirebaseMessaging.onBackgroundMessage(handleBackgroudMessage);

    /// âœ… Manejo de mensajes en primer plano
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      print("ðŸ“© NotificaciÃ³n en primer plano: ${message.notification?.title}");
      print("ðŸ“© Cuerpo: ${message.notification?.body}");
      print("ðŸ“© Data: ${message.data}");
      final noti = message.data['routeeee'] ?? 'Valor predeterminado';
      print("ðŸ“© Routeeee: $noti");
    });

    /// âœ… Manejo de cuando la app se lanza desde una notificaciÃ³n
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      print("ðŸ“² La app se ha abierto desde una notificaciÃ³n: ${message.notification?.title}");
    });
  }

  /// âœ… Guardar y actualizar token despuÃ©s del login
  Future<void> saveTokenAfterLogin() async {
    final token = await _firebaseMessaging.getToken();
    print('ðŸ“Œ Token obtenido despuÃ©s del login: $token');

    if (token != null) {
      final savedToken = await _getSavedToken();
      if (savedToken != token) {
        print("ðŸ“Œ El token ha cambiado. Actualizando el backend.");

        // Guardar el nuevo token localmente
        await _saveToken(token);

        // Enviar el nuevo token al backend
        final config = Configuration(tokenNotification: token);
        updateConfiguration(config);
      } else {
        // Enviar el nuevo token al backend
        final config = Configuration(tokenNotification: token);
        updateConfiguration(config);
        print("ðŸ“Œ El token no ha cambiado. No es necesario actualizar el backend.");
      }
    }
  }
}
